---
import Layout from '../layouts/Base.astro';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const isEN = lang === 'en';

// Form styling with explicit colors
const inputClass = "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none transition-all text-gray-800 bg-white shadow-sm";
const textareaClass = "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none transition-all text-gray-800 bg-white shadow-sm";
const selectClass = "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none transition-all text-gray-800 bg-white shadow-sm";
const labelClass = "block text-sm text-gray-700 mb-1 font-medium";

// Title and heading
const title = isEN ? 'Book a Service | RotoRem' : 'Запазете час | РотоРем';
const heading = isEN ? 'Book a Service' : 'Запазете час';

// Descriptive text about in-home service
const inHomeDescription = isEN 
  ? 'Our technician will come to your home to perform the repair - no need to transport your appliance.'
  : 'Нашият техник ще дойде във вашия дом, за да извърши ремонта - не е нужно да транспортирате уреда си.';

// Diagnostic fee notice
const feeNotice = isEN
  ? 'A diagnostic fee of 30 BGN applies to all in-home visits. This fee covers the inspection and diagnosis of your appliance issue.'
  : 'Такса за диагностика от 30 лв. се прилага за всички посещения на място. Тази такса покрива инспекцията и диагностиката на проблема с вашия уред.';

// Define 2-hour time slots from 9 AM to 7 PM
const timeSlots = [
  { value: '09:00-11:00', label: isEN ? '9:00 AM - 11:00 AM' : '9:00 - 11:00' },
  { value: '11:00-13:00', label: isEN ? '11:00 AM - 1:00 PM' : '11:00 - 13:00' },
  { value: '13:00-15:00', label: isEN ? '1:00 PM - 3:00 PM' : '13:00 - 15:00' },
  { value: '15:00-17:00', label: isEN ? '3:00 PM - 5:00 PM' : '15:00 - 17:00' },
  { value: '17:00-19:00', label: isEN ? '5:00 PM - 7:00 PM' : '17:00 - 19:00' },
];
---

<Layout title={title} noindex={true}>
  <section class="py-16 md:py-24 bg-gradient-to-b from-white to-blue-50">
    <div class="container max-w-3xl">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">{heading}</h1>
        
        <!-- Description about in-home service -->
        <p class="text-gray-600 max-w-xl mx-auto mb-4">
          {inHomeDescription}
        </p>
        
        <!-- Diagnostic fee notice -->
        <div class="bg-amber-50 p-4 rounded-lg border border-amber-200 shadow-sm mb-8 mx-auto max-w-xl">
          <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-amber-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
            </div>
            <p class="ml-3 text-amber-700">
              {feeNotice}
            </p>
          </div>
        </div>
        
        <!-- Loading indicator for availability check -->
        <div id="availability-loading" class="hidden">
          <div class="bg-blue-50 p-4 rounded-lg border border-blue-200 shadow-sm mb-4 mx-auto max-w-xl">
            <div class="flex items-center justify-center">
              <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
              <p class="text-blue-700">
                {isEN ? 'Checking availability...' : 'Проверяване на наличността...'}
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Form -->
      <form
        class="grid gap-6"
        id="booking-form"
      >
        <!-- Contact Information -->
        <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
            {isEN ? 'Contact Information' : 'Данни за контакт'}
          </h3>
          
          <div class="grid gap-4">
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {t('book.name')} <span class="text-red-500">*</span>
              </label>
              <input 
                required 
                name="name" 
                placeholder={t('book.name')} 
                class={inputClass}
                style="color: #111827; background-color: white;"
              />
            </div>
            
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {t('book.phone')} <span class="text-red-500">*</span>
              </label>
              <input 
                required 
                name="phone" 
                placeholder={t('book.phone')} 
                class={inputClass}
                type="tel"
                style="color: #111827; background-color: white;"
              />
            </div>
            
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {t('book.email')} <span class="text-gray-400">({isEN ? 'optional' : 'по желание'})</span>
              </label>
              <input 
                name="email" 
                placeholder={t('book.email')} 
                class={inputClass}
                type="email"
                style="color: #111827; background-color: white;"
              />
            </div>
          </div>
        </div>
        
        <!-- Address Information Section -->
        <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            {isEN ? 'Service Address' : 'Адрес за обслужване'}
          </h3>
          
          <div class="grid gap-4">
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {isEN ? 'Full address' : 'Пълен адрес'} <span class="text-red-500">*</span>
              </label>
              <input 
                required
                name="address" 
                placeholder={isEN ? 'Full address' : 'Пълен адрес'} 
                class={inputClass}
                style="color: #111827; background-color: white;"
              />
            </div>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm text-gray-700 mb-1 font-medium">
                  {isEN ? 'Apartment/Floor' : 'Апартамент/Етаж'} <span class="text-gray-400">({isEN ? 'optional' : 'по желание'})</span>
                </label>
                <input 
                  name="apartment" 
                  placeholder={isEN ? 'Apartment/Floor' : 'Апартамент/Етаж'} 
                  class={inputClass}
                  style="color: #111827; background-color: white;"
                />
              </div>
              
              <div>
                <label class="block text-sm text-gray-700 mb-1 font-medium">
                  {isEN ? 'City' : 'Град'} <span class="text-red-500">*</span>
                </label>
                <input 
                  required
                  name="city" 
                  placeholder={isEN ? 'City' : 'Град'} 
                  class={inputClass}
                  value={isEN ? 'Varna' : 'Варна'} 
                  style="color: #111827; background-color: white;"
                />
              </div>
            </div>
            
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {isEN ? 'Access instructions' : 'Инструкции за достъп'} <span class="text-gray-400">({isEN ? 'optional' : 'по желание'})</span>
              </label>
              <textarea 
                name="directions" 
                rows="2" 
                placeholder={isEN ? 'Access instructions (optional)' : 'Инструкции за достъп (по желание)'} 
                class={textareaClass}
                style="color: #111827; background-color: white;"
              ></textarea>
            </div>
          </div>
        </div>
        
        <!-- Service Details -->
        <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>
            </svg>
            {isEN ? 'Service Details' : 'Детайли за услугата'}
          </h3>
          
          <div class="grid gap-4">
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {t('book.appliance')} <span class="text-red-500">*</span>
              </label>
              <input 
                required
                name="appliance" 
                placeholder={t('book.appliance')} 
                class={inputClass}
                style="color: #111827; background-color: white;"
              />
            </div>
            
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label class={labelClass}>
                  {t('book.date')} <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <input 
                    required
                    id="date-input"
                    name="date" 
                    type="date" 
                    class={inputClass}
                    style="color: #111827; background-color: white;"
                    min={new Date().toISOString().split('T')[0]}
                  />
                  <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                  </div>
                </div>
              </div>
              
              <div>
                <label class={labelClass}>
                  {t('book.time')} <span class="text-red-500">*</span>
                </label>
                <select 
                  required
                  id="time-select"
                  name="time" 
                  class={selectClass} 
                  style="color: #111827; background-color: white;"
                  disabled
                >
                  <option value="">{isEN ? 'Select a date first' : 'Първо изберете дата'}</option>
                </select>
              </div>
            </div>
            
            <div>
              <label class="block text-sm text-gray-700 mb-1 font-medium">
                {t('book.details')} <span class="text-gray-400">({isEN ? 'optional' : 'по желание'})</span>
              </label>
              <textarea 
                name="details" 
                rows="4" 
                placeholder={t('book.details')} 
                class={textareaClass}
                style="color: #111827; background-color: white;"
              ></textarea>
            </div>
          </div>
        </div>

        <!-- Submit button -->
        <button type="submit" id="submit-btn" class="btn-cta w-full py-4 text-lg font-semibold shadow-lg hover:scale-105 transition-transform duration-300 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
          </svg>
          <span id="btn-text">{isEN ? 'Book Service' : 'Запази час'}</span>
        </button>
        
        <!-- Add service guarantee below the form -->
        <div class="text-center text-gray-500 text-sm flex flex-col items-center">
          <div class="flex items-center mb-1 text-primary">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
            </svg>
            <span class="font-medium">
              {isEN ? 'Quality Guarantee on All Repairs' : 'Гаранция за качество на всички ремонти'}
            </span>
          </div>
          <p>
            {isEN ? 'Your information is secure & never shared with third parties.' : 'Вашата информация е защитена и никога не се споделя с трети страни.'}
          </p>
        </div>
      </form>
    </div>
  </section>
</Layout>

<script define:vars={{ timeSlots, isEN }}>
  document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.getElementById('date-input');
    const timeSelect = document.getElementById('time-select');
    const form = document.getElementById('booking-form');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = document.getElementById('btn-text');
    const loadingIndicator = document.getElementById('availability-loading');
    
    // Your Google Apps Script URL
    const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyEuA51niEYvOG3erkABkleEKnPySeYI_4dLwRYg79KmmK2inI32t5iVAhvCeGA8oxV1Q/exec';
    
    let bookedSlots = [];
    let availabilityLoaded = false;

    // JSONP function to handle response
    window.handleBookedSlotsResponse = function(data) {
      console.log('JSONP response received:', data);
      bookedSlots = Array.isArray(data) ? data : [];
      
      // Process dates to ensure consistent format and avoid timezone issues
      bookedSlots = bookedSlots.map(slot => {
        let processedDate = slot.date;
        
        // If the date looks like it might be a Date object string, parse it carefully
        if (typeof processedDate === 'string' && processedDate.includes('T')) {
          // This is likely an ISO string, extract just the date part
          processedDate = processedDate.split('T')[0];
        } else if (typeof processedDate === 'string' && processedDate.match(/^\d{4}-\d{2}-\d{2}$/)) {
          // Already in YYYY-MM-DD format, use as-is
          processedDate = processedDate;
        }
        
        console.log(`Processing slot: original date="${slot.date}", processed date="${processedDate}", time="${slot.time}"`);
        
        return {
          date: processedDate,
          time: slot.time
        };
      });
      
      console.log('Processed booked slots:', bookedSlots.length);
      
      // Log each booked slot for debugging
      bookedSlots.forEach((slot, index) => {
        console.log(`Booked slot ${index + 1}: ${slot.date} at ${slot.time}`);
      });
      
      availabilityLoaded = true;
      
      // Hide loading indicator
      if (loadingIndicator) {
        loadingIndicator.classList.add('hidden');
      }
      
      // Update time slots if a date is already selected
      updateTimeSlots();
    };

    // Function to fetch booked slots using JSONP
    function fetchBookedSlots() {
      console.log('Fetching booked slots using JSONP...');
      
      // Show loading indicator
      if (loadingIndicator) {
        loadingIndicator.classList.remove('hidden');
      }
      
      // Create script element for JSONP
      const script = document.createElement('script');
      const callbackName = 'handleBookedSlotsResponse';
      const timestamp = Date.now();
      
      script.src = `${GOOGLE_SCRIPT_URL}?callback=${callbackName}&t=${timestamp}`;
      script.onerror = function() {
        console.error('Failed to load booked slots via JSONP');
        bookedSlots = [];
        availabilityLoaded = true;
        
        // Hide loading indicator
        if (loadingIndicator) {
          loadingIndicator.classList.add('hidden');
        }
        
        updateTimeSlots();
      };
      
      // Add script to head to make the request
      document.head.appendChild(script);
      
      // Clean up after 10 seconds
      setTimeout(() => {
        if (script.parentNode) {
          document.head.removeChild(script);
        }
        if (!availabilityLoaded) {
          console.warn('JSONP request timed out');
          bookedSlots = [];
          availabilityLoaded = true;
          
          // Hide loading indicator
          if (loadingIndicator) {
            loadingIndicator.classList.add('hidden');
          }
          
          updateTimeSlots();
        }
      }, 10000);
    }

    // Function to check if a slot is booked
    function isSlotBooked(date, time) {
      if (!availabilityLoaded) {
        console.log('Availability not loaded yet');
        return false;
      }
      
      // Ensure the date is in YYYY-MM-DD format
      let checkDate = date;
      if (date.includes('T')) {
        checkDate = date.split('T')[0];
      }
      
      console.log(`Checking if slot is booked: ${checkDate} at ${time}`);
      console.log('Available booked slots to check against:', bookedSlots);
      
      const isBooked = bookedSlots.some(slot => {
        const dateMatch = slot.date === checkDate;
        const timeMatch = slot.time === time;
        const matches = dateMatch && timeMatch;
        
        console.log(`Comparing: slot.date="${slot.date}" === checkDate="${checkDate}" (${dateMatch}) && slot.time="${slot.time}" === time="${time}" (${timeMatch}) = ${matches}`);
        return matches;
      });
      
      console.log(`Final result: Slot ${checkDate} ${time} is ${isBooked ? 'BOOKED' : 'AVAILABLE'}`);
      return isBooked;
    }

    // Function to update time slots based on selected date
    function updateTimeSlots() {
      const selectedDate = dateInput.value;
      console.log('Updating time slots for date:', selectedDate);
      
      if (!selectedDate) {
        timeSelect.innerHTML = `<option value="">${isEN ? 'Select a date first' : 'Първо изберете дата'}</option>`;
        timeSelect.disabled = true;
        return;
      }

      if (!availabilityLoaded) {
        timeSelect.innerHTML = `<option value="">${isEN ? 'Loading availability...' : 'Зареждане на наличността...'}</option>`;
        timeSelect.disabled = true;
        return;
      }

      // Enable the select and clear existing options
      timeSelect.disabled = false;
      timeSelect.innerHTML = `<option value="">${isEN ? 'Choose a time slot' : 'Изберете час'}</option>`;

      let availableSlots = 0;

      // Add time slot options (weekdays only since weekends are blocked)
      timeSlots.forEach(slot => {
        const isBooked = isSlotBooked(selectedDate, slot.value);
        console.log(`Processing slot ${slot.value}: ${isBooked ? 'BOOKED' : 'AVAILABLE'}`);
        
        const option = document.createElement('option');
        option.value = slot.value;
        
        if (isBooked) {
          option.disabled = true;
          option.style.color = '#9CA3AF';
          option.style.backgroundColor = '#F3F4F6';
          option.textContent = `${slot.label} (${isEN ? 'Booked' : 'Заето'})`;
          console.log(`Made slot ${slot.value} disabled`);
        } else {
          option.style.color = '#111827';
          option.textContent = slot.label;
          availableSlots++;
          console.log(`Made slot ${slot.value} available`);
        }
        
        timeSelect.appendChild(option);
      });

      // Add message if no slots available
      if (availableSlots === 0) {
        const noSlotsOption = document.createElement('option');
        noSlotsOption.disabled = true;
        noSlotsOption.style.color = '#EF4444';
        noSlotsOption.textContent = isEN ? 'No slots available this day' : 'Няма свободни часове за този ден';
        timeSelect.appendChild(noSlotsOption);
      }
      
      console.log(`Time slots updated. Available: ${availableSlots}, Total: ${timeSlots.length}`);
    }

    // Update time slots when date changes
    dateInput.addEventListener('change', function() {
      const selectedDate = dateInput.value;
      
      // Check if selected date is a weekend
      if (selectedDate) {
        const date = new Date(selectedDate + 'T00:00:00'); // Force local time
        const dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday
        
        if (dayOfWeek === 0 || dayOfWeek === 6) { // Block both Saturday and Sunday
          const dayName = dayOfWeek === 0 ? 
            (isEN ? 'Sunday' : 'неделя') : 
            (isEN ? 'Saturday' : 'събота');
          
          alert(isEN ? 
            `We don't work on ${dayName}. Please select a weekday (Monday-Friday).` :
            `Не работим в ${dayName}. Моля изберете делник (понеделник-петък).`
          );
          
          dateInput.value = '';
          updateTimeSlots();
          return;
        }
      }
      
      updateTimeSlots();
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!timeSelect.value) {
        alert(isEN ? 'Please select a time slot' : 'Моля изберете час');
        return false;
      }

      // Check if slot is still available (double-check)
      const selectedDate = dateInput.value;
      const selectedTime = timeSelect.value;
      
      // Validate that it's not a weekend day (additional safety check)
      const date = new Date(selectedDate + 'T00:00:00');
      const dayOfWeek = date.getDay();
      if (dayOfWeek === 0 || dayOfWeek === 6) {
        alert(isEN ? 
          'Weekend days are not allowed. Please select a weekday (Monday-Friday).' :
          'Уикендите не са разрешени. Моля изберете делник (понеделник-петък).'
        );
        dateInput.value = '';
        updateTimeSlots();
        return false;
      }
      
      if (isSlotBooked(selectedDate, selectedTime)) {
        alert(isEN ? 'This time slot has just been booked by someone else. Please select another time.' : 'Този час току-що беше зает от друг клиент. Моля изберете друг час.');
        // Refresh the availability
        availabilityLoaded = false;
        fetchBookedSlots();
        return false;
      }

      // Update button to show loading state
      submitBtn.disabled = true;
      btnText.textContent = isEN ? 'Sending...' : 'Изпращане...';
      submitBtn.classList.add('opacity-75');

      try {
        const formData = new FormData(this);
        const data = Object.fromEntries(formData);

        console.log('Submitting booking data:', data);

        // Create a hidden iframe for form submission
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.name = 'booking_submit_frame';
        document.body.appendChild(iframe);
        
        // Create form for submission
        const submitForm = document.createElement('form');
        submitForm.method = 'POST';
        submitForm.action = GOOGLE_SCRIPT_URL;
        submitForm.target = 'booking_submit_frame';
        
        // Add all data as hidden inputs
        Object.keys(data).forEach(key => {
          if (data[key]) { // Only add non-empty values
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = data[key];
            submitForm.appendChild(input);
          }
        });
        
        document.body.appendChild(submitForm);
        
        console.log('Submitting booking to Google Sheets...');
        submitForm.submit();
        
        // Clean up after a short delay
        setTimeout(() => {
          try {
            document.body.removeChild(submitForm);
            document.body.removeChild(iframe);
            console.log('✅ Booking submission completed');
          } catch (e) {
            console.log('Cleanup completed');
          }
        }, 2000);

        // Success - redirect to thank you page
        console.log('Booking submitted successfully!');
        
        // Small delay to ensure processing
        setTimeout(() => {
          window.location.href = '/thankyou';
        }, 1500);

      } catch (error) {
        console.error('Booking submission error:', error);
        
        // Reset button
        submitBtn.disabled = false;
        btnText.textContent = isEN ? 'Book Service' : 'Запази час';
        submitBtn.classList.remove('opacity-75');
        
        alert(isEN 
          ? 'There was an error submitting your booking. Please try again or call us directly.' 
          : 'Възникна грешка при изпращането на заявката. Моля опитайте отново или се обадете директно.'
        );
      }
    });

    // Initial load - fetch booked slots
    fetchBookedSlots();
    
    // Set up weekend restriction for date input
    function setupWeekendRestriction() {
      // Set minimum date to today
      const today = new Date();
      const todayString = today.toISOString().split('T')[0];
      dateInput.min = todayString;
      
      // Add event listener to prevent weekend selection
      dateInput.addEventListener('input', function(e) {
        const selectedDate = e.target.value;
        if (selectedDate) {
          const date = new Date(selectedDate + 'T00:00:00');
          const dayOfWeek = date.getDay();
          
          // If weekend day selected, clear it
          if (dayOfWeek === 0 || dayOfWeek === 6) {
            e.target.value = '';
            
            const dayName = dayOfWeek === 0 ? 
              (isEN ? 'Sunday' : 'неделя') : 
              (isEN ? 'Saturday' : 'събота');
            
            setTimeout(() => {
              alert(isEN ? 
                `We don't work on ${dayName}. Please select a weekday (Monday-Friday).` :
                `Не работим в ${dayName}. Моля изберете делник (понеделник-петък).`
              );
            }, 100);
          }
        }
      });
    }
    
    // Initialize weekend restriction
    setupWeekendRestriction();
  });
</script>

<style>
  /* Form styling */
  input:focus, textarea:focus, select:focus {
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }
  
  input, textarea, select, button {
    transition: all 0.3s ease;
  }
  
  /* Add subtle animation to form sections */
  .bg-white {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .bg-white:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.05), 0 4px 6px -2px rgba(0, 0, 0, 0.025);
  }

  /* Ensure date input opens calendar on mobile */
  input[type="date"] {
    position: relative;
  }

  /* Custom calendar icon positioning */
  input[type="date"]::-webkit-calendar-picker-indicator {
    position: absolute;
    right: 10px;
    cursor: pointer;
  }

  /* Style disabled options in select */
  select option:disabled {
    color: #9CA3AF !important;
    background-color: #F3F4F6 !important;
  }

  /* Loading state for submit button */
  .btn-cta:disabled {
    cursor: not-allowed;
    transform: none !important;
  }

  /* Loading spinner animation */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Try to make week start on Monday (browser dependent) */
  input[type="date"] {
    /* This might help in some browsers */
    --start-of-week: 1; /* Monday = 1 */
  }
</style>