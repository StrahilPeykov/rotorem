---
import Layout from '../layouts/Base.astro';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const isEN = lang === 'en';

// Form styling with explicit colors
const inputClass = "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none transition-all text-gray-800 bg-white shadow-sm";
const textareaClass = "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none transition-all text-gray-800 bg-white shadow-sm";
const selectClass = "w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent outline-none transition-all text-gray-800 bg-white shadow-sm";
const labelClass = "block text-sm text-gray-700 mb-1 font-medium";

// Title and heading
const title = isEN ? 'Book a Service | RotoRem' : '–ó–∞–ø–∞–∑–µ—Ç–µ —á–∞—Å | –†–æ—Ç–æ–†–µ–º';
const heading = isEN ? 'Book a Service' : '–ó–∞–ø–∞–∑–µ—Ç–µ —á–∞—Å';

// Descriptive text about in-home service
const inHomeDescription = isEN 
  ? 'Our technician will come to your home to perform the repair - no need to transport your appliance.'
  : '–ù–∞—à–∏—è—Ç —Ç–µ—Ö–Ω–∏–∫ —â–µ –¥–æ–π–¥–µ –≤—ä–≤ –≤–∞—à–∏—è –¥–æ–º, –∑–∞ –¥–∞ –∏–∑–≤—ä—Ä—à–∏ —Ä–µ–º–æ–Ω—Ç–∞ - –Ω–µ –µ –Ω—É–∂–Ω–æ –¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–∞—Ç–µ —É—Ä–µ–¥–∞ —Å–∏.';

// Diagnostic fee notice
const feeNotice = isEN
  ? 'A diagnostic fee of 30 BGN applies to all in-home visits. This fee covers the inspection and diagnosis of your appliance issue.'
  : '–¢–∞–∫—Å–∞ –∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç 30 –ª–≤. —Å–µ –ø—Ä–∏–ª–∞–≥–∞ –∑–∞ –≤—Å–∏—á–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –Ω–∞ –º—è—Å—Ç–æ. –¢–∞–∑–∏ —Ç–∞–∫—Å–∞ –ø–æ–∫—Ä–∏–≤–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏—è—Ç–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞—Ç–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏—è —É—Ä–µ–¥.';

// Define 2-hour time slots from 9 AM to 7 PM
const timeSlots = [
  { value: '09:00-11:00', label: isEN ? '9:00 AM - 11:00 AM' : '9:00 - 11:00' },
  { value: '11:00-13:00', label: isEN ? '11:00 AM - 1:00 PM' : '11:00 - 13:00' },
  { value: '13:00-15:00', label: isEN ? '1:00 PM - 3:00 PM' : '13:00 - 15:00' },
  { value: '15:00-17:00', label: isEN ? '3:00 PM - 5:00 PM' : '15:00 - 17:00' },
  { value: '17:00-19:00', label: isEN ? '5:00 PM - 7:00 PM' : '17:00 - 19:00' },
];

// Mock booked slots - in production, this would come from your booking system
const bookedSlots = [
  { date: '2025-06-02', time: '09:00-11:00' },
  { date: '2025-06-02', time: '15:00-17:00' },
  { date: '2025-06-03', time: '11:00-13:00' },
];
---

<Layout title={title} noindex={true}>
  <section class="py-16 md:py-24 bg-gradient-to-b from-white to-blue-50">
    <div class="container max-w-3xl">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-4">{heading}</h1>
        
        <!-- Description about in-home service -->
        <p class="text-gray-600 max-w-xl mx-auto mb-4">
          {inHomeDescription}
        </p>
        
        <!-- Diagnostic fee notice -->
        <div class="bg-amber-50 p-4 rounded-lg border border-amber-200 shadow-sm mb-8 mx-auto max-w-xl">
          <div class="flex items-start">
            <div class="flex-shrink-0 mt-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-amber-600" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
            </div>
            <p class="ml-3 text-amber-700">
              {feeNotice}
            </p>
          </div>
        </div>
      </div>

      <!-- Form -->
      <form
        class="grid gap-6"
        name="booking"
        method="POST"
        data-netlify="true"
        netlify-honeypot="bot-field"
        action="/thankyou"
        id="booking-form"
      >
        <input type="hidden" name="form-name" value="booking" />
        <input name="bot-field" class="hidden" />
        <input type="hidden" name="subject" value="üîß –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑–∞ —Ä–µ–º–æ–Ω—Ç –æ—Ç rotoremvarna.com" />

        <!-- Contact Information -->
        <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
            {isEN ? 'Contact Information' : '–î–∞–Ω–Ω–∏ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç'}
          </h3>
          
          <div class="grid gap-4">
            <input 
              required 
              name="name" 
              placeholder={t('book.name')} 
              class={inputClass}
              style="color: #111827; background-color: white;"
            />
            
            <input 
              required 
              name="phone" 
              placeholder={t('book.phone')} 
              class={inputClass}
              type="tel"
              style="color: #111827; background-color: white;"
            />
            
            <input 
              name="email" 
              placeholder={t('book.email')} 
              class={inputClass}
              type="email"
              style="color: #111827; background-color: white;"
            />
          </div>
        </div>
        
        <!-- Address Information Section -->
        <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            {isEN ? 'Service Address' : '–ê–¥—Ä–µ—Å –∑–∞ –æ–±—Å–ª—É–∂–≤–∞–Ω–µ'}
          </h3>
          
          <div class="grid gap-4">
            <input 
              required
              name="address" 
              placeholder={isEN ? 'Full address' : '–ü—ä–ª–µ–Ω –∞–¥—Ä–µ—Å'} 
              class={inputClass}
              style="color: #111827; background-color: white;"
            />
            
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <input 
                name="apartment" 
                placeholder={isEN ? 'Apartment/Floor' : '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç/–ï—Ç–∞–∂'} 
                class={inputClass}
                style="color: #111827; background-color: white;"
              />
              
              <input 
                name="city" 
                placeholder={isEN ? 'City' : '–ì—Ä–∞–¥'} 
                class={inputClass}
                value={isEN ? 'Varna' : '–í–∞—Ä–Ω–∞'} 
                style="color: #111827; background-color: white;"
              />
            </div>
            
            <textarea 
              name="directions" 
              rows="2" 
              placeholder={isEN ? 'Access instructions (optional)' : '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞ –¥–æ—Å—Ç—ä–ø (–ø–æ –∂–µ–ª–∞–Ω–∏–µ)'} 
              class={textareaClass}
              style="color: #111827; background-color: white;"
            ></textarea>
          </div>
        </div>
        
        <!-- Service Details -->
        <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
          <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2 text-primary" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>
            </svg>
            {isEN ? 'Service Details' : '–î–µ—Ç–∞–π–ª–∏ –∑–∞ —É—Å–ª—É–≥–∞—Ç–∞'}
          </h3>
          
          <div class="grid gap-4">
            <input 
              required
              name="appliance" 
              placeholder={t('book.appliance')} 
              class={inputClass}
              style="color: #111827; background-color: white;"
            />
            
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label class={labelClass}>
                  {t('book.date')} *
                </label>
                <div class="relative">
                  <input 
                    required
                    id="date-input"
                    name="date" 
                    type="date" 
                    class={inputClass}
                    style="color: #111827; background-color: white;"
                    min={new Date().toISOString().split('T')[0]}
                  />
                  <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                  </div>
                </div>
              </div>
              
              <div>
                <label class={labelClass}>
                  {t('book.time')} *
                </label>
                <select 
                  required
                  id="time-select"
                  name="time" 
                  class={selectClass} 
                  style="color: #111827; background-color: white;"
                >
                  <option value="">{isEN ? 'Select a date first' : '–ü—ä—Ä–≤–æ –∏–∑–±–µ—Ä–µ—Ç–µ –¥–∞—Ç–∞'}</option>
                </select>
              </div>
            </div>
            
            <textarea 
              name="details" 
              rows="4" 
              placeholder={t('book.details')} 
              class={textareaClass}
              style="color: #111827; background-color: white;"
            ></textarea>
          </div>
        </div>

        <!-- Submit button -->
        <button type="submit" id="submit-btn" class="btn-cta w-full py-4 text-lg font-semibold shadow-lg hover:scale-105 transition-transform duration-300 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
          </svg>
          <span id="btn-text">{isEN ? 'Book Service' : '–ó–∞–ø–∞–∑–∏ —á–∞—Å'}</span>
        </button>
        
        <!-- Add service guarantee below the form -->
        <div class="text-center text-gray-500 text-sm flex flex-col items-center">
          <div class="flex items-center mb-1 text-primary">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
            </svg>
            <span class="font-medium">
              {isEN ? 'Quality Guarantee on All Repairs' : '–ì–∞—Ä–∞–Ω—Ü–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ä–µ–º–æ–Ω—Ç–∏'}
            </span>
          </div>
          <p>
            {isEN ? 'Your information is secure & never shared with third parties.' : '–í–∞—à–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ –∑–∞—â–∏—Ç–µ–Ω–∞ –∏ –Ω–∏–∫–æ–≥–∞ –Ω–µ —Å–µ —Å–ø–æ–¥–µ–ª—è —Å —Ç—Ä–µ—Ç–∏ —Å—Ç—Ä–∞–Ω–∏.'}
          </p>
        </div>
      </form>
    </div>
  </section>
</Layout>

<script define:vars={{ timeSlots, isEN }}>
  document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.getElementById('date-input');
    const timeSelect = document.getElementById('time-select');
    const form = document.getElementById('booking-form');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = document.getElementById('btn-text');
    
    // Your Google Apps Script URL
    const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbyEuA51niEYvOG3erkABkleEKnPySeYI_4dLwRYg79KmmK2inI32t5iVAhvCeGA8oxV1Q/exec';
    
    let bookedSlots = [];

    // JSONP function to bypass CORS
    function fetchBookedSlotsJSONP() {
      return new Promise((resolve, reject) => {
        // Create a unique callback name
        const callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());
        
        // Create script element
        const script = document.createElement('script');
        script.src = GOOGLE_SCRIPT_URL + '?callback=' + callbackName;
        
        // Set up callback
        window[callbackName] = function(data) {
          delete window[callbackName];
          document.body.removeChild(script);
          resolve(data);
        };
        
        // Handle errors
        script.onerror = function() {
          delete window[callbackName];
          document.body.removeChild(script);
          reject(new Error('JSONP request failed'));
        };
        
        // Add script to page
        document.body.appendChild(script);
        
        // Timeout after 10 seconds
        setTimeout(() => {
          if (window[callbackName]) {
            delete window[callbackName];
            document.body.removeChild(script);
            reject(new Error('JSONP request timeout'));
          }
        }, 10000);
      });
    }

    // Fetch booked slots from Google Sheets using JSONP
    async function fetchBookedSlots() {
      try {
        console.log('Fetching booked slots from:', GOOGLE_SCRIPT_URL);
        const data = await fetchBookedSlotsJSONP();
        console.log('Booked slots data:', data);
        bookedSlots = data || [];
      } catch (error) {
        console.error('Error fetching booked slots:', error);
        bookedSlots = []; // Fallback to empty array
      }
    }

    // Function to check if a slot is booked
    function isSlotBooked(date, time) {
      return bookedSlots.some(slot => slot.date === date && slot.time === time);
    }

    // Function to update time slots based on selected date
    function updateTimeSlots() {
      const selectedDate = dateInput.value;
      
      if (!selectedDate) {
        timeSelect.innerHTML = `<option value="">${isEN ? 'Select a date first' : '–ü—ä—Ä–≤–æ –∏–∑–±–µ—Ä–µ—Ç–µ –¥–∞—Ç–∞'}</option>`;
        return;
      }

      // Clear existing options
      timeSelect.innerHTML = `<option value="">${isEN ? 'Choose a time slot' : '–ò–∑–±–µ—Ä–µ—Ç–µ —á–∞—Å'}</option>`;

      // Add time slot options
      timeSlots.forEach(slot => {
        const isBooked = isSlotBooked(selectedDate, slot.value);
        const option = document.createElement('option');
        option.value = slot.value;
        option.textContent = slot.label;
        
        if (isBooked) {
          option.disabled = true;
          option.style.color = '#9CA3AF';
          option.style.backgroundColor = '#F3F4F6';
        } else {
          option.style.color = '#111827';
        }
        
        timeSelect.appendChild(option);
      });
    }

    // Update time slots when date changes
    dateInput.addEventListener('change', updateTimeSlots);

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!timeSelect.value) {
        alert(isEN ? 'Please select a time slot' : '–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ —á–∞—Å');
        return false;
      }

      // Update button to show loading state
      submitBtn.disabled = true;
      btnText.textContent = isEN ? 'Sending...' : '–ò–∑–ø—Ä–∞—â–∞–Ω–µ...';
      submitBtn.classList.add('opacity-75');

      try {
        const formData = new FormData(this);
        const data = Object.fromEntries(formData);

        console.log('Submitting data:', data); // Debug log

        // Try to submit to Google Sheets first
        try {
          const response = await fetch(GOOGLE_SCRIPT_URL, {
            method: 'POST',
            mode: 'cors',
            headers: { 
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });

          console.log('Response status:', response.status);
          
          if (response.ok) {
            const result = await response.json();
            console.log('Response result:', result);

            if (result.success) {
              console.log('Google Sheets submission successful');
              
              // Also submit to Netlify Forms as backup
              try {
                await fetch('/', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                  body: new URLSearchParams(formData).toString()
                });
                console.log('Netlify backup successful');
              } catch (netlifyError) {
                console.warn('Netlify backup failed:', netlifyError);
                // Continue anyway since Google Sheets worked
              }
              
              window.location.href = '/thankyou';
              return;
            } else if (result.error === 'Slot already booked') {
              alert(isEN ? 'This time slot has been booked. Please select another.' : '–¢–æ–∑–∏ —á–∞—Å –µ –≤–µ—á–µ –∑–∞–µ—Ç. –ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥.');
              await fetchBookedSlots(); // Refresh booked slots
              updateTimeSlots();
              // Reset button
              submitBtn.disabled = false;
              btnText.textContent = isEN ? 'Book Service' : '–ó–∞–ø–∞–∑–∏ —á–∞—Å';
              submitBtn.classList.remove('opacity-75');
              return;
            } else {
              console.error('Booking failed with result:', result);
              throw new Error(result.error || 'Booking failed');
            }
          } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
        } catch (googleSheetsError) {
          console.warn('Google Sheets submission failed, using Netlify fallback:', googleSheetsError);
          
          // Fallback to Netlify Forms only
          const netlifyResponse = await fetch('/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams(formData).toString()
          });

          if (netlifyResponse.ok) {
            console.log('Netlify Forms fallback successful');
            window.location.href = '/thankyou';
            return;
          } else {
            throw new Error('Both Google Sheets and Netlify Forms failed');
          }
        }

      } catch (error) {
        console.error('Booking submission error:', error);
        
        // Reset button
        submitBtn.disabled = false;
        btnText.textContent = isEN ? 'Book Service' : '–ó–∞–ø–∞–∑–∏ —á–∞—Å';
        submitBtn.classList.remove('opacity-75');
        
        // Show detailed error for debugging
        const errorMessage = isEN 
          ? `There was an error submitting your booking: ${error.message}. Please try again or call us directly.`
          : `–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞: ${error.message}. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –∏–ª–∏ —Å–µ –æ–±–∞–¥–µ—Ç–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ.`;
        
        alert(errorMessage);
      }
    });

    // Initial load
    fetchBookedSlots().then(() => {
      updateTimeSlots();
    });
  });
</script>

<style>
  /* Form styling */
  input:focus, textarea:focus, select:focus {
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }
  
  input, textarea, select, button {
    transition: all 0.3s ease;
  }
  
  /* Add subtle animation to form sections */
  .bg-white {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .bg-white:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.05), 0 4px 6px -2px rgba(0, 0, 0, 0.025);
  }

  /* Ensure date input opens calendar on mobile */
  input[type="date"] {
    position: relative;
  }

  /* Custom calendar icon positioning */
  input[type="date"]::-webkit-calendar-picker-indicator {
    position: absolute;
    right: 10px;
    cursor: pointer;
  }

  /* Style disabled options in select */
  select option:disabled {
    color: #9CA3AF !important;
    background-color: #F3F4F6 !important;
  }

  /* Loading state for submit button */
  .btn-cta:disabled {
    cursor: not-allowed;
    transform: none !important;
  }
</style>